from ctftools.crypto.rsa import (
    common_modulus_attack,
    export_key,
    import_key,
    low_public_exponent_attack,
)

SharedRSAKey = {
    "n": 8865622551983013461,
    "e": 65537,
    "d": 1378333279237137473,
    "pri_key_pem": b"-----BEGIN RSA PRIVATE KEY-----\nMD0CAQACCHsJBL0ro75VAgMBAAECCBMg0tCTB2RBAgUApuO2UQIFALy60sUCBBp0\nnJECBQCzD/6RAgQTDPhu\n-----END RSA PRIVATE KEY-----",
    "pub_key_pem": b"-----BEGIN PUBLIC KEY-----\nMCMwDQYJKoZIhvcNAQEBBQADEgAwDwIIewkEvSujvlUCAwEAAQ==\n-----END PUBLIC KEY-----",
}


def test_export_key():
    n = SharedRSAKey["n"]
    e = SharedRSAKey["e"]
    d = SharedRSAKey["d"]
    pri_key_pem = SharedRSAKey["pri_key_pem"]
    pub_key_pem = SharedRSAKey["pub_key_pem"]

    assert export_key(n, e, d) == pri_key_pem
    assert export_key(n, e) == pub_key_pem


def test_import_key():
    n = SharedRSAKey["n"]
    e = SharedRSAKey["e"]
    d = SharedRSAKey["d"]
    pri_key_pem = SharedRSAKey["pri_key_pem"]
    pub_key_pem = SharedRSAKey["pub_key_pem"]

    assert import_key(pub_key_pem) == (n, e, None)
    assert import_key(pri_key_pem) == (n, e, d)


def test_low_public_exponent_attack():
    # if m^e < n, success
    n = 236934049743116267137999082243372631809789567482083918717832642810097363305512293474568071369055296264199854438630820352634325357252399203160052660683745421710174826323192475870497319105418435646820494864987787286941817224659073497212768480618387152477878449603008187097148599534206055318807657902493850180695091646575878916531742076951110529004783428260456713315007812112632429296257313525506207087475539303737022587194108436132757979273391594299137176227924904126161234005321583720836733205639052615538054399452669637400105028428545751844036229657412844469034970807562336527158965779903175305550570647732255961850364080642984562893392375273054434538280546913977098212083374336482279710348958536764229803743404325258229707314844255917497531735251105389366176228741806064378293682890877558325834873371615135474627913981994123692172918524625407966731238257519603614744577
    e = 11
    c = 80265690974140286785447882525076768851800986505783169077080797677035805215248640465159446426193422263912423067392651719120282968933314718780685629466284745121303594495759721471318134122366715904
    m = low_public_exponent_attack(c, e)
    assert m is not None
    assert pow(m, e, n) == c

    # if m^e >= n, fail
    n = SharedRSAKey["n"]
    e = SharedRSAKey["e"]
    c = pow(424311244315114354, e, n)
    m = low_public_exponent_attack(c, e)
    assert m is None


def test_common_modulus_attack():
    c1 = 31245613066230236135997292058569206395680454941058944043509154563005060190814608912311960621541380177263729484813587219939482082149364931312974265584924870255051998707362568912809354196174521497706889623145055224465249239058545793186487598288349557994962471796123812641262333312663854093854256378046806351772
    e1 = 15
    c2 = 92350938053768292754191005211213878887893436411057234111670652174708887899660270683310534957172527087077867913815305993168665684244014544665191689732085163328933243177007334429640996117313669291257930180488998369555495747753207601268613857985015817558715623025983930834028388450530996874949560339298142017255
    e2 = 13
    n = 103109065902334620226101162008793963504256027939117020091876799039690801944735604259018655534860183205031069083254290258577291605287053538752280231959857465853228851714786887294961873006234153079187216285516823832102424110934062954272346111907571393964363630079343598511602013316604641904852018969178919051627
    m = 604424160775843504266020346055193633

    result = common_modulus_attack(c1, e1, c2, e2, n)
    assert result == m
